version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: smart_building_planner_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-smart_building_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-smart_building_pass}
      POSTGRES_DB: ${POSTGRES_DB:-smart_building_planner}
      TZ: Asia/Tokyo
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-smart_building_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart_building_planner_backend
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      NODE_ENV: production
      PORT: 8000
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-smart_building_planner}
      DB_USER: ${POSTGRES_USER:-smart_building_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-smart_building_pass}
      # Azure OpenAI
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      AZURE_OPENAI_API_VERSION: ${AZURE_OPENAI_API_VERSION}
      AZURE_OPENAI_DEPLOYMENT_NAME: ${AZURE_OPENAI_DEPLOYMENT_NAME}
      # Azure Storage
      AZURE_STORAGE_CONNECTION_STRING: ${AZURE_STORAGE_CONNECTION_STRING}
      AZURE_STORAGE_CONTAINER_BIM: ${AZURE_STORAGE_CONTAINER_BIM:-bim-files}
      AZURE_STORAGE_CONTAINER_REPORTS: ${AZURE_STORAGE_CONTAINER_REPORTS:-reports}
      # CORS
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: smart_building_planner_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
    depends_on:
      - backend
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: smart_building_planner_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge