import * as WebIFC from 'web-ifc'

// 3D点の型定義
export interface Point3D {
  x: number
  y: number
  z: number
}

// 建物データの型定義
export interface BuildingData {
  width: number
  height: number
  depth: number
  floors: number
  windows?: {
    width: number
    height: number
    positions: Point3D[]
  }[]
}

export class IFCGenerator {
  private ifcAPI: WebIFC.IfcAPI
  private modelID: number = 0
  private globalIdCounter: number = 0

  constructor() {
    this.ifcAPI = new WebIFC.IfcAPI()
  }

  async initialize(): Promise<void> {
    await this.ifcAPI.Init()
  }

  async generateIFC(buildingData: BuildingData): Promise<Uint8Array> {
    this.modelID = this.ifcAPI.CreateModel({ schema: WebIFC.Schemas.IFC2X3 })

    // プロジェクト情報の設定
    this.createProject()
    
    // サイトの作成
    const site = this.createSite()
    
    // 建物の作成
    const building = this.createBuilding()
    
    // 建物階層の設定
    this.ifcAPI.WriteLine(this.modelID, this.createRelAggregates(site, [building]))

    // 各階の作成
    const storeys = this.createStoreys(buildingData.floors)
    this.ifcAPI.WriteLine(this.modelID, this.createRelAggregates(building, storeys))

    // 建物要素の作成
    const walls = this.createWalls(buildingData)
    const slabs = this.createSlabs(buildingData)
    const windows = this.createWindows(buildingData)

    // 要素を各階に配置
    for (let i = 0; i < storeys.length; i++) {
      const floorElements = [...walls, ...slabs]
      if (i === 0) floorElements.push(...windows) // 窓は1階のみ
      
      this.ifcAPI.WriteLine(this.modelID, this.createRelContainedInSpatialStructure(storeys[i], floorElements))
    }

    // IFCファイルのバイナリデータを取得
    const ifcData = this.ifcAPI.SaveModel(this.modelID)
    this.ifcAPI.CloseModel(this.modelID)

    return ifcData
  }

  private createProject(): number {
    const project = {
      expressID: ++this.globalIdCounter,
      type: WebIFC.IFCPROJECT,
      GlobalId: this.createGuid(),
      OwnerHistory: this.createOwnerHistory(),
      Name: 'Smart Building Project',
      Description: 'Generated by Smart Building Planner',
      ObjectType: null,
      LongName: null,
      Phase: null,
      RepresentationContexts: [this.createGeometricRepresentationContext()],
      UnitsInContext: this.createUnitAssignment()
    }

    this.ifcAPI.WriteLine(this.modelID, project)
    return project.expressID
  }

  private createSite(): number {
    const site = {
      expressID: ++this.globalIdCounter,
      type: WebIFC.IFCSITE,
      GlobalId: this.createGuid(),
      OwnerHistory: this.createOwnerHistory(),
      Name: 'Site',
      Description: null,
      ObjectType: null,
      ObjectPlacement: this.createLocalPlacement(),
      Representation: null,
      LongName: null,
      CompositionType: WebIFC.IFCELEMENTCOMPONENT,
      RefLatitude: null,
      RefLongitude: null,
      RefElevation: null,
      LandTitleNumber: null,
      SiteAddress: null
    }

    this.ifcAPI.WriteLine(this.modelID, site)
    return site.expressID
  }

  private createBuilding(): number {
    const building = {
      expressID: ++this.globalIdCounter,
      type: WebIFC.IFCBUILDING,
      GlobalId: this.createGuid(),
      OwnerHistory: this.createOwnerHistory(),
      Name: 'Building',
      Description: null,
      ObjectType: null,
      ObjectPlacement: this.createLocalPlacement(),
      Representation: null,
      LongName: null,
      CompositionType: WebIFC.IFCELEMENTCOMPONENT,
      ElevationOfRefHeight: 0.0,
      ElevationOfTerrain: 0.0,
      BuildingAddress: null
    }

    this.ifcAPI.WriteLine(this.modelID, building)
    return building.expressID
  }

  private createStoreys(floors: number): number[] {
    const storeys: number[] = []

    for (let i = 0; i < floors; i++) {
      const storey = {
        expressID: ++this.globalIdCounter,
        type: WebIFC.IFCBUILDINGSTOREY,
        GlobalId: this.createGuid(),
        OwnerHistory: this.createOwnerHistory(),
        Name: `Floor ${i + 1}`,
        Description: null,
        ObjectType: null,
        ObjectPlacement: this.createLocalPlacement(0, 0, i * 3), // 各階3m
        Representation: null,
        LongName: null,
        CompositionType: WebIFC.IFCELEMENTCOMPONENT,
        Elevation: i * 3000 // mm単位
      }

      this.ifcAPI.WriteLine(this.modelID, storey)
      storeys.push(storey.expressID)
    }

    return storeys
  }

  private createWalls(buildingData: BuildingData): number[] {
    const walls: number[] = []
    const { width, height, depth } = buildingData

    // 壁の座標定義
    const wallPositions = [
      { start: { x: 0, y: 0, z: 0 }, end: { x: width, y: 0, z: 0 } }, // 南壁
      { start: { x: width, y: 0, z: 0 }, end: { x: width, y: depth, z: 0 } }, // 東壁
      { start: { x: width, y: depth, z: 0 }, end: { x: 0, y: depth, z: 0 } }, // 北壁
      { start: { x: 0, y: depth, z: 0 }, end: { x: 0, y: 0, z: 0 } } // 西壁
    ]

    wallPositions.forEach((wallPos, index) => {
      const wall = {
        expressID: ++this.globalIdCounter,
        type: WebIFC.IFCWALL,
        GlobalId: this.createGuid(),
        OwnerHistory: this.createOwnerHistory(),
        Name: `Wall ${index + 1}`,
        Description: null,
        ObjectType: null,
        ObjectPlacement: this.createLocalPlacement(wallPos.start.x, wallPos.start.y, wallPos.start.z),
        Representation: this.createWallRepresentation(wallPos, height),
        Tag: null
      }

      this.ifcAPI.WriteLine(this.modelID, wall)
      walls.push(wall.expressID)
    })

    return walls
  }

  private createSlabs(buildingData: BuildingData): number[] {
    const slabs: number[] = []
    const { width, depth } = buildingData

    // 床スラブ
    const floorSlab = {
      expressID: ++this.globalIdCounter,
      type: WebIFC.IFCSLAB,
      GlobalId: this.createGuid(),
      OwnerHistory: this.createOwnerHistory(),
      Name: 'Floor Slab',
      Description: null,
      ObjectType: null,
      ObjectPlacement: this.createLocalPlacement(),
      Representation: this.createSlabRepresentation(width, depth, 0.2),
      Tag: null,
      PredefinedType: 0 // FLOOR
    }

    this.ifcAPI.WriteLine(this.modelID, floorSlab)
    slabs.push(floorSlab.expressID)

    return slabs
  }

  private createWindows(buildingData: BuildingData): number[] {
    const windows: number[] = []

    if (buildingData.windows) {
      buildingData.windows.forEach((windowData, index) => {
        windowData.positions.forEach((pos, posIndex) => {
          const window = {
            expressID: ++this.globalIdCounter,
            type: WebIFC.IFCWINDOW,
            GlobalId: this.createGuid(),
            OwnerHistory: this.createOwnerHistory(),
            Name: `Window ${index + 1}-${posIndex + 1}`,
            Description: null,
            ObjectType: null,
            ObjectPlacement: this.createLocalPlacement(pos.x, pos.y, pos.z),
            Representation: this.createWindowRepresentation(windowData.width, windowData.height),
            Tag: null
          }

          this.ifcAPI.WriteLine(this.modelID, window)
          windows.push(window.expressID)
        })
      })
    }

    return windows
  }

  // ヘルパーメソッド
  private createGuid(): string {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0
      const v = c === 'x' ? r : (r & 0x3 | 0x8)
      return v.toString(16)
    })
  }

  private createOwnerHistory(): any {
    return {
      type: WebIFC.IFCOWNERHISTORY,
      OwningUser: this.createPersonAndOrganization(),
      OwningApplication: this.createApplication(),
      State: null,
      ChangeAction: 0, // ADDED
      LastModifiedDate: null,
      LastModifyingUser: null,
      LastModifyingApplication: null,
      CreationDate: Math.floor(Date.now() / 1000)
    }
  }

  private createPersonAndOrganization(): any {
    return {
      type: WebIFC.IFCPERSONANDORGANIZATION,
      ThePerson: {
        type: WebIFC.IFCPERSON,
        Identification: 'User',
        FamilyName: null,
        GivenName: null,
        MiddleNames: null,
        PrefixTitles: null,
        SuffixTitles: null,
        Roles: null,
        Addresses: null
      },
      TheOrganization: {
        type: WebIFC.IFCORGANIZATION,
        Identification: 'SmartBuildingPlanner',
        Name: 'Smart Building Planner',
        Description: null,
        Roles: null,
        Addresses: null
      },
      Roles: null
    }
  }

  private createApplication(): any {
    return {
      type: WebIFC.IFCAPPLICATION,
      ApplicationDeveloper: {
        type: WebIFC.IFCORGANIZATION,
        Identification: 'SmartBuildingPlanner',
        Name: 'Smart Building Planner',
        Description: null,
        Roles: null,
        Addresses: null
      },
      Version: '1.0.0',
      ApplicationFullName: 'Smart Building Planner',
      ApplicationIdentifier: 'SBP'
    }
  }

  private createGeometricRepresentationContext(): any {
    return {
      type: WebIFC.IFCGEOMETRICREPRESENTATIONCONTEXT,
      ContextIdentifier: '3D',
      ContextType: 'Model',
      CoordinateSpaceDimension: 3,
      Precision: 1e-5,
      WorldCoordinateSystem: this.createAxis2Placement3D(),
      TrueNorth: null
    }
  }

  private createUnitAssignment(): any {
    return {
      type: WebIFC.IFCUNITASSIGNMENT,
      Units: [
        {
          type: WebIFC.IFCSIUNIT,
          UnitType: 0, // LENGTHUNIT
          Name: 0, // METRE
          Prefix: null
        }
      ]
    }
  }

  private createLocalPlacement(x: number = 0, y: number = 0, z: number = 0): any {
    return {
      type: WebIFC.IFCLOCALPLACEMENT,
      PlacementRelTo: null,
      RelativePlacement: this.createAxis2Placement3D(x, y, z)
    }
  }

  private createAxis2Placement3D(x: number = 0, y: number = 0, z: number = 0): any {
    return {
      type: WebIFC.IFCAXIS2PLACEMENT3D,
      Location: {
        type: WebIFC.IFCCARTESIANPOINT,
        Coordinates: [x, y, z]
      },
      Axis: null,
      RefDirection: null
    }
  }

  private createWallRepresentation(wallPos: any, height: number): any {
    return {
      type: WebIFC.IFCPRODUCTDEFINITIONSHAPE,
      Name: null,
      Description: null,
      Representations: [
        {
          type: WebIFC.IFCSHAPEREPRESENTATION,
          ContextOfItems: null,
          RepresentationIdentifier: 'Body',
          RepresentationType: 'SweptSolid',
          Items: [this.createWallGeometry(wallPos, height)]
        }
      ]
    }
  }

  private createSlabRepresentation(width: number, depth: number, thickness: number): any {
    return {
      type: WebIFC.IFCPRODUCTDEFINITIONSHAPE,
      Name: null,
      Description: null,
      Representations: [
        {
          type: WebIFC.IFCSHAPEREPRESENTATION,
          ContextOfItems: null,
          RepresentationIdentifier: 'Body',
          RepresentationType: 'SweptSolid',
          Items: [this.createSlabGeometry(width, depth, thickness)]
        }
      ]
    }
  }

  private createWindowRepresentation(width: number, height: number): any {
    return {
      type: WebIFC.IFCPRODUCTDEFINITIONSHAPE,
      Name: null,
      Description: null,
      Representations: [
        {
          type: WebIFC.IFCSHAPEREPRESENTATION,
          ContextOfItems: null,
          RepresentationIdentifier: 'Body',
          RepresentationType: 'SweptSolid',
          Items: [this.createWindowGeometry(width, height)]
        }
      ]
    }
  }

  private createWallGeometry(wallPos: any, height: number): any {
    const length = Math.sqrt(
      Math.pow(wallPos.end.x - wallPos.start.x, 2) +
      Math.pow(wallPos.end.y - wallPos.start.y, 2)
    )

    return {
      type: WebIFC.IFCEXTRUDEDAREASOLID,
      SweptArea: {
        type: WebIFC.IFCRECTANGLEPROFILEDEF,
        ProfileType: 0, // AREA
        ProfileName: null,
        Position: null,
        XDim: length,
        YDim: 0.2 // 壁厚20cm
      },
      Position: this.createAxis2Placement3D(),
      ExtrudedDirection: {
        type: WebIFC.IFCDIRECTION,
        DirectionRatios: [0, 0, 1]
      },
      Depth: height
    }
  }

  private createSlabGeometry(width: number, depth: number, thickness: number): any {
    return {
      type: WebIFC.IFCEXTRUDEDAREASOLID,
      SweptArea: {
        type: WebIFC.IFCRECTANGLEPROFILEDEF,
        ProfileType: 0, // AREA
        ProfileName: null,
        Position: null,
        XDim: width,
        YDim: depth
      },
      Position: this.createAxis2Placement3D(),
      ExtrudedDirection: {
        type: WebIFC.IFCDIRECTION,
        DirectionRatios: [0, 0, 1]
      },
      Depth: thickness
    }
  }

  private createWindowGeometry(width: number, height: number): any {
    return {
      type: WebIFC.IFCEXTRUDEDAREASOLID,
      SweptArea: {
        type: WebIFC.IFCRECTANGLEPROFILEDEF,
        ProfileType: 0, // AREA
        ProfileName: null,
        Position: null,
        XDim: width,
        YDim: height
      },
      Position: this.createAxis2Placement3D(),
      ExtrudedDirection: {
        type: WebIFC.IFCDIRECTION,
        DirectionRatios: [0, 0, 1]
      },
      Depth: 0.05 // 窓の厚み5cm
    }
  }

  private createRelAggregates(parent: number, children: number[]): any {
    return {
      type: WebIFC.IFCRELAGGREGATES,
      GlobalId: this.createGuid(),
      OwnerHistory: this.createOwnerHistory(),
      Name: null,
      Description: null,
      RelatingObject: parent,
      RelatedObjects: children
    }
  }

  private createRelContainedInSpatialStructure(container: number, elements: number[]): any {
    return {
      type: WebIFC.IFCRELCONTAINEDINSPATIALSTRUCTURE,
      GlobalId: this.createGuid(),
      OwnerHistory: this.createOwnerHistory(),
      Name: null,
      Description: null,
      RelatedElements: elements,
      RelatingStructure: container
    }
  }
}